// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

function evaluate(guess, solution) {
  var black = List.fold_left((function (a, b) {
          return a + b | 0;
        }), 0, List.map2((function (a, b) {
              var match = Caml_obj.caml_equal(a, b);
              if (match) {
                return 1;
              } else {
                return 0;
              }
            }), guess, solution));
  var count = function (l, item) {
    return List.fold_left((function (a, b) {
                  var match = Caml_obj.caml_equal(b, item);
                  if (match) {
                    return a + 1 | 0;
                  } else {
                    return a;
                  }
                }), 0, l);
  };
  var f = function (a, b) {
    return a + Caml_primitive.caml_int_min(count(guess, b), count(solution, b)) | 0;
  };
  var white = List.fold_left(f, -black | 0, List.sort_uniq(Caml_obj.caml_compare, guess));
  return /* tuple */[
          black,
          white
        ];
}

console.log(evaluate(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ], /* :: */[
          2,
          /* :: */[
            3,
            /* :: */[
              1,
              /* [] */0
            ]
          ]
        ]));

console.log(evaluate(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ], /* :: */[
          1,
          /* :: */[
            3,
            /* :: */[
              5,
              /* [] */0
            ]
          ]
        ]));

console.log(evaluate(/* :: */[
          1,
          /* :: */[
            2,
            /* [] */0
          ]
        ], /* :: */[
          1,
          /* :: */[
            2,
            /* [] */0
          ]
        ]));

exports.evaluate = evaluate;
/*  Not a pure module */
